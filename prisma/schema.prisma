// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  lastName       String?
  role           String?
  // userTypeId      String   @db.ObjectId
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  phoneNumber    String?
  address        String?
  city           String?
  nationality    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // userType UserType @relation(fields: [userTypeId], references: [id]) // onDelete: Cascade ?
  accounts        Account[]
  // flightPilot  Flight[] @relation("user")
  // flightCertifier  Flight[] @relation("certifier")
  pilotedFlights   Flight[]  @relation("pilotedFlights")
  certifiedFlights Flight[]  @relation("certifiedFlights")
}

model Flight {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation("pilotedFlights", fields: [userId], references: [id])
  userId     String    @db.ObjectId
  date        DateTime? // Format: "2023-01-01T00:00:00.000Z"
  aircraftId  String
  // aircraftId      String    @db.ObjectId    Leo: TO UNCOMMENT LATER AND REPLACE LINE ABOVE
  stages      String?
  flightType  String? // instructor, simulator, copilot, pilot
  hourCount   Float?
  folio       Int?
  remarks     String?
  certified   Boolean?
  certifier   User?     @relation("certifiedFlights", fields: [certifierId], references: [id])
  certifierId String?   @db.ObjectId
  createdAt   DateTime  @default(now())

  // airplane Airplane @relation(fields: [aircraftId], references: [id])      Leo: TO UNCOMMENT LATER
}

// model UserType {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   userType        String

//   users User[]
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Airplane {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  registrationId String   @unique // matr√≠cula
  brand          String
  model          String
  planeClass     String
  engine         String
  HPs            Int
  remarks        String?
  createdAt      DateTime @default(now())

  // flights Flight[]   Leo: TO UNCOMMENT LATER
}

// model Reservation {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   listingId String @db.ObjectId  
//   startDate DateTime
//   endDate DateTime
//   totalPrice Int
//   createdAt DateTime @default(now())

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
// }
