// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// enum Role {
//   PILOT
//   INSTRUCTOR
//   COMPANY
// }

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  lastName           String?
  role               String?
  // role           Role      @default(PILOT)
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  phoneNumber        String?
  address            String?
  city               String?
  nationality        String?
  premium            Boolean?
  premiumExpiredDate DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // userType UserType @relation(fields: [userTypeId], references: [id]) // onDelete: Cascade ?
  accounts         Account[]
  pilotedFlights   Flight[]      @relation("pilotedFlights")
  certifiedFlights Flight[]      @relation("certifiedFlights")
  folios           Folio[]
  // pilotQualifications Qualification[] @relation("pilotQualifications")
  // qualifiedInstructor Qualification[] @relation("qualifiedInstructor")
  rater            Rates[]       @relation("rater")
  rated            Rates[]       @relation("rated")
  certificates     Certificate[]
}

model Flight {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  date        DateTime? // Format: "2023-01-01T00:00:00.000Z"
  aircraftId  String
  // aircraftId      String    @db.ObjectId    Leo: TO UNCOMMENT LATER AND REPLACE LINE ABOVE
  stages      String?
  flightType  String? // instructor, simulator, copilot, pilot
  hourCount   Float?
  dayHours    Float?
  nightHours  Float?
  instHours   Float?
  folio       Int?
  remarks     String?
  certified   Boolean?
  certifierId String?   @db.ObjectId
  createdAt   DateTime  @default(now())

  user      User  @relation("pilotedFlights", fields: [userId], references: [id])
  certifier User? @relation("certifiedFlights", fields: [certifierId], references: [id])
  // airplane Airplane @relation(fields: [aircraftId], references: [id])      Leo: TO UNCOMMENT LATER
}

// model UserType {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   userType        String

//   users User[]
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Airplane {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  registrationId String   @unique // matr√≠cula
  brand          String
  model          String
  planeClass     String
  engine         String
  HPs            Int
  remarks        String?
  createdAt      DateTime @default(now())

  // flights Flight[]   Leo: TO UNCOMMENT LATER
}

model Folio {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  folioNum       Int
  userId         String  @db.ObjectId
  signedFolioUrl String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, folioNum])
}

// model Qualification {
//   id               String  @id @default(auto()) @map("_id") @db.ObjectId
//   pilotId          String  @db.ObjectId
//   instructorId     String  @db.ObjectId
//   qualificationNum Int
//   comment          String?

//   pilot      User @relation("pilotQualifications", fields: [pilotId], references: [id])
//   instructor User @relation("qualifiedInstructor", fields: [instructorId], references: [id])

//   @@unique([pilotId, instructorId])
// }

model Rates {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  rate        Int
  remarks     String?
  certifierId String?  @db.ObjectId
  createdAt   DateTime @default(now())
  user        User     @relation("rater", fields: [userId], references: [id])
  certifier   User?    @relation("rated", fields: [certifierId], references: [id])
}

model Certificate {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String    @db.ObjectId
  certificateName           String
  certificateDescription    String?
  certificateExpirationDate DateTime?
  certificateImageUrl       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, certificateName])
}
